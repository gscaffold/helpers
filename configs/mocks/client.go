// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_configs is a generated GoMock package.
package mock_configs

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	configs "github.com/gscaffold/helpers/configs"
)

// MockIClient is a mock of IClient interface.
type MockIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIClientMockRecorder
}

// MockIClientMockRecorder is the mock recorder for MockIClient.
type MockIClientMockRecorder struct {
	mock *MockIClient
}

// NewMockIClient creates a new mock instance.
func NewMockIClient(ctrl *gomock.Controller) *MockIClient {
	mock := &MockIClient{ctrl: ctrl}
	mock.recorder = &MockIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClient) EXPECT() *MockIClientMockRecorder {
	return m.recorder
}

// BatchGet mocks base method.
func (m *MockIClient) BatchGet(kind string, keys ...string) map[string]string {
	m.ctrl.T.Helper()
	varargs := []interface{}{kind}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGet", varargs...)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// BatchGet indicates an expected call of BatchGet.
func (mr *MockIClientMockRecorder) BatchGet(kind interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{kind}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockIClient)(nil).BatchGet), varargs...)
}

// Get mocks base method.
func (m *MockIClient) Get(kind, key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", kind, key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockIClientMockRecorder) Get(kind, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIClient)(nil).Get), kind, key)
}

// MonitorChange mocks base method.
func (m *MockIClient) MonitorChange(kind, key string, fn configs.ConfigChangeCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MonitorChange", kind, key, fn)
}

// MonitorChange indicates an expected call of MonitorChange.
func (mr *MockIClientMockRecorder) MonitorChange(kind, key, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitorChange", reflect.TypeOf((*MockIClient)(nil).MonitorChange), kind, key, fn)
}

// Name mocks base method.
func (m *MockIClient) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockIClientMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIClient)(nil).Name))
}
